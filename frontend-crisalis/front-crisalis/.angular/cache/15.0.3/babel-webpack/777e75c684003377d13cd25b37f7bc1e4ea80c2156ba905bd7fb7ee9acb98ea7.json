{"ast":null,"code":"import { HTTP_INTERCEPTORS } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./token.service\";\nexport class InterceptorService {\n  constructor(tokenService) {\n    this.tokenService = tokenService;\n  }\n  intercept(request, next) {\n    let intRequest = request;\n    const token = this.tokenService.getToken();\n    if (token != null) {\n      intRequest = request.clone({\n        headers: request.headers.set('Authorization', 'Bearer' + token)\n      });\n    }\n    return next.handle(intRequest);\n  }\n}\nInterceptorService.ɵfac = function InterceptorService_Factory(t) {\n  return new (t || InterceptorService)(i0.ɵɵinject(i1.TokenService));\n};\nInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: InterceptorService,\n  factory: InterceptorService.ɵfac,\n  providedIn: 'root'\n});\nexport const interceptorProvider = [{\n  provide: HTTP_INTERCEPTORS,\n  useClass: InterceptorService,\n  multi: true\n}];","map":{"version":3,"mappings":"AAAA,SAA8CA,iBAAiB,QAAQ,sBAAsB;;;AAQ7F,OAAM,MAAOC,kBAAkB;EAC7BC,YAAoBC,YAA0B;IAA1B,iBAAY,GAAZA,YAAY;EAEhC;EACAC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IACpD,IAAIC,UAAU,GAAGF,OAAO;IACxB,MAAMG,KAAK,GAAG,IAAI,CAACL,YAAY,CAACM,QAAQ,EAAE;IAC1C,IAAGD,KAAK,IAAI,IAAI,EAAC;MACfD,UAAU,GAAGF,OAAO,CAACK,KAAK,CAAC;QACzBC,OAAO,EAAEN,OAAO,CAACM,OAAO,CAACC,GAAG,CAAC,eAAe,EAAC,QAAQ,GAAGJ,KAAK;OAC9D,CAAC;;IAEJ,OAAOF,IAAI,CAACO,MAAM,CAACN,UAAU,CAAC;EAChC;;AAbWN,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAa,SAAlBb,kBAAkB;EAAAc,YAFjB;AAAM;AAmBpB,OAAO,MAAMC,mBAAmB,GAAG,CAAC;EAClCC,OAAO,EAAEjB,iBAAiB;EAC1BkB,QAAQ,EAAEjB,kBAAkB;EAC5BkB,KAAK,EAAE;CACR,CAAC","names":["HTTP_INTERCEPTORS","InterceptorService","constructor","tokenService","intercept","request","next","intRequest","token","getToken","clone","headers","set","handle","factory","providedIn","interceptorProvider","provide","useClass","multi"],"sourceRoot":"","sources":["/home/vrivaans/Desktop/programacion/crisalis/frontend-crisalis/front-crisalis/src/app/services/interceptor-service.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpRequest, HTTP_INTERCEPTORS } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { TokenService } from \"./token.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InterceptorService {\n  constructor(private tokenService: TokenService){\n\n  }\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>{\n    let intRequest = request;\n    const token = this.tokenService.getToken();\n    if(token != null){\n      intRequest = request.clone({\n        headers: request.headers.set('Authorization','Bearer' + token)\n      });\n    }\n    return next.handle(intRequest)\n  }\n\n}\n\nexport const interceptorProvider = [{\n  provide: HTTP_INTERCEPTORS,\n  useClass: InterceptorService,\n  multi: true\n}]\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}